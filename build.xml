<?xml version="1.0" encoding="UTF-8"?>

<!--
	Build.xml de Camix_Java-v3.0
	pour Ant.

	Version : 3.0
	Auteur  : Matthias Brun
-->

<project name="Camix" basedir="." default="compile">

	<!--
		Organistion générale du projet.
	-->

	<!-- Organisation des sources de code, de test et de configuration. -->
        <property name="src.dir" value="src"/>
        <property name="test.dir" value="test"/>
	<property name="conf.dir" value="config"/>

	<!-- Organistion de la construction. -->
        <property name="build.dir" value="build"/>
        <property name="doc.dir" value="doc"/>



	<!--
		Configuration des outils de compilation et de documentation.
	-->

	<!-- Encodage des fichiers sources. -->
	<property name="encoding.source" value="utf-8"/>

	<!-- Classpath intégrant la base de données. -->
	<property name="bdd.path" value="/usr/local/share/java/mysql.jar"/>
	
	<!--
		Configuration des outils de test.
	-->

	<!-- Organisation pour JMeter. -->
	<property name="jmeter.dir" value="jmeter"/>
	<property name="jmeter.package" value="camix"/>
	<property name="jmeter.src" value="${jmeter.dir}/src"/>
	<property name="jmeter.build" value="${jmeter.dir}/build"/>
	<property name="jmeter.doc" value="${jmeter.dir}/doc"/>
	<property name="jmeter.plan" value="${jmeter.dir}/plan_test.jmx"/>
	<property name="jmeter.log" value="${jmeter.dir}/jmeter.log"/>
	<property name="jmeter.properties" value="${jmeter.dir}/user.properties"/>

	<!-- Classpath intégrant JMeter. -->
	<property name="jmeter.classpath" value="/usr/local/share/java/jmeter-tcp.jar"/>

	<!-- Classpath intégrant JUnit et EasyMock. -->
	<property name="junit.path" value="/usr/local/share/java/junit4.jar"/>
	<property name="cglib.path" value="/usr/local/share/java/cglib-nodep.jar"/>
	<property name="objenesis.path" value="/usr/local/share/java/objenesis.jar"/>
	<property name="mock.path" value="/usr/local/share/java/easymock.jar"/>

	<!-- Décommenter pour utiliser l'interface texte de JUnit. -->
	<property name="test.runner" value="junit.textui.TestRunner"/>

	<!-- Décommenter pour utiliser l'interface swing de JUnit. -->
	<!-- property name="test.runner" value="junit.swingui.TestRunner"/-->
	<!-- property name="junit.graphic.path" value="/usr/local/share/java/junit.jar"/-->

	<!-- Décommenter pour utiliser l'interface AWT de JUnit. -->
	<!-- property name="test.runner" value="junit.awtui.TestRunner"/-->
	<!-- property name="junit.graphic.path" value="/usr/local/share/java/junit.jar"/-->	

	<!--<property name="test.path" value="${junit.graphic.path}:${junit.path}:${cglib.path}:${objenesis.path}:${mock.path}"/>-->
	<property name="test.path" value="${junit.path}:${cglib.path}:${objenesis.path}:${mock.path}"/>


	<!--
		Configuration des outils de vérification statique.
	-->

	<!-- Organisation de checkstyle. -->
	<taskdef resource="checkstyletask.properties" 
		classpath="/usr/local/share/java/checkstyle.jar"/>
	<property name="checkstyle.file" value="checkstyle.xml"/>



	<!--
		Configuration du projet.
	-->

	<!-- Sourcepath et classpath du projet. -->
	<property name="src.path" value="${src.dir}:${test.dir}"/>
	<property name="class.path" 
		value="${conf.dir}:${build.dir}:${bdd.path}:${test.path}"/>



	<!--
		Organisation du projet.
	-->

	<!-- Nom de base des packages. -->
	<property name="package.base" value="camix"/>

	<!-- Programme principale et programme de test associé. -->
	<property name="main.program" value="${package.base}.Camix"/>
	<property name="test.program" value="${package.base}.CamixTestSuite"/>



	<!--
		Compilation. 
	-->

	<target name="compile"> 
		<!-- Création du repertoire de destination des classes. -->
		<mkdir dir="${build.dir}"/>

		<!-- Compilation des sources du projet. -->
		<javac classpath="${class.path}" sourcepath="${src.path}" srcdir="${src.dir}" destdir="${build.dir}"
		       encoding="${encoding.source}" includeantruntime="false"/>
		<javac classpath="${class.path}" sourcepath="${src.path}" srcdir="${test.dir}" destdir="${build.dir}"
		       encoding="${encoding.source}" includeantruntime="false"/>
	</target>

	<target name="compile_jmeter"> 
		<!-- Création du repertoire de destination des classes pour JMeter. -->
		<mkdir dir="${jmeter.build}"/>

		<!-- Compilation des sources pour JMeter. -->
		<javac classpath="${jmeter.classpath}" srcdir="${jmeter.src}" destdir="${jmeter.build}"
		       encoding="${encoding.source}" includeantruntime="false"/>
	</target>



	<!--
		Exécution.
	-->

	<target name="launch">
		<!-- Lancement du programme. -->
		<java classpath="${class.path}" classname="${main.program}" fork="true"/>
	</target>



	<!--
		Documentation.
	-->

	<target name="documentation">
		<!-- Génération de la documentation javadoc. -->
		<javadoc classpath="${class.path}" sourcepath="${src.path}" destdir="${doc.dir}"
		         encoding="${encoding.source}" packagenames="${package.base}.*"/>
	</target>

	<target name="documentation_jmeter">
		<!-- Génération de la documentation javadoc pour JMeter. -->
		<javadoc classpath="${jmeter.classpath}" sourcepath="${jmeter.src}" destdir="${jmeter.doc}"
		         encoding="${encoding.source}" packagenames="${jmeter.package}"/>
	</target>



	<!--
		Nettoyage.
	-->

	<target name="clean">
		<!-- Nettoyage du projet (suppression du répertoire build). -->
		<delete dir="${build.dir}"/>
	</target>

	<target name="mrproper" depends="clean">
		<!-- Nettoyage du projet (suppression du répertoire build et de la documentation). -->
		<delete dir="${doc.dir}"/>
	</target>

	<target name="new" depends="clean,compile"/>
		<!-- Nettoyer, compiler. -->

	<target name="clean_jmeter">
		<!-- Nettoyage du projet (suppression du répertoire build) pour JMeter. -->
		<delete dir="${jmeter.build}"/>
	</target>

	<target name="mrproper_jmeter" depends="clean_jmeter">
		<!-- Nettoyage du projet (suppression du répertoire build et de la documentation) pour JMeter. -->
		<delete dir="${jmeter.doc}"/>
	</target>

	<target name="new_jmeter" depends="clean_jmeter,compile_jmeter"/>
		<!-- Nettoyer, compiler pour JMeter. -->



	<!--
		Test logiciel.
	-->

	<target name="test_camix">
		<!-- Tests du programme Camix. -->
		<java classpath="${class.path}" classname="${test.runner}"  fork="true">
			<arg line="${test.program}"/>
		</java>
	</target>

	<target name="test_jmeter">
		<!-- Tests avec JMeter. -->
		<echo message="jmeter -q ${jmeter.properties} -j ${jmeter.log} -t ${jmeter.plan}"/>
	</target>



	<!--
		Qualité du code.
	-->

	<target name="checkstyle_camix">
		<!-- Vérifications statiques avec checkfile. -->
		<checkstyle config="${checkstyle.file}">
			<fileset dir="${src.dir}"/>
			<fileset dir="${test.dir}"/>
		</checkstyle>
	</target>

</project>
